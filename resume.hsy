#lang s-exp heresy

;; Helper Functions

; () -> List
; iterates over the open file and produces a list of strings
(def fn listfile ()
  (let recur ([x Null]
              [in (input)])
    (if (eof? in) then (reverse x) else (recur (join in x) (input)))))

; List Str -> List
; Given a list of strings and a string,
; returns that list with all instances of string removed
(def fn rember$ (str lst)
  (select
   ((null? lst) Null)
   ((=$ (head lst) str) (rember$ str (tail lst)))
   (else (join (head lst)
               (rember$ str (tail lst))))))

; String -> String
; given a string containing the name of a GH project, returns a MD link to project
(def fn gh-link (str)
  (& "[" str "](http://github.com/" github "/" str ")"))

; String String -> String
; Given a string and optional alternate character,
; returns multi-line string with a matching header line of eq. length
(def fn heading (str (char "###"))
  (& char " " str "  \n"))

; String -> String
; Returns a string with "* " attached, for building bulleted lists
(def fn bullet (str)
  (& "  * " str))

; String -> String
; Given semi-colon-delimited string list, returns bulleted multi-line list
(def fn bullet-list (str)
  (let ([spl (rember$ ";" (split str '(";")))])
    (& (for (x in spl with "")
         (carry (& cry "\n" (bullet x))))
       "\n\n")))

; String -> String
; Wraps the string in the given character (defaults to "*" for italics)
(def fn ** (str (c "*"))
  (& c str c))

; List String -> String
; Creates a list from the string delimited with the given string
(def fn delimit (str lst)
  (foldr (fn (x y) (& x str y)) "" lst))

; List String -> String
; Generates newline-delimited string from list of strings
(def prep (partial delimit "  \n"))

; List String -> String
; splices strings together with comma
(def colonify (partial delimit ";"))

; List -> Datum
(def last (compose head reverse))

;; Data
(def details 
  (using (file "./data/details.txt" as 'input)
         (join (heading (input))
               (listfile))))

(def github (last (split (last details) '("/"))))

(def self (& (** (using (file "./data/self.txt" as 'input) (input))) "  \n"))

(def technologies 
  (using (file "./data/languages.txt" as 'input)
         (join "Technologies" 
               (listfile))))
(def projects 
  (join "Projects" 
        (using (file "./data/projects.txt" as 'input)
               (let recur ([x Null]
                           [in (input)])
                 (if (eof? in) 
                     then (reverse x) 
                     else (recur 
                              (join (rember$ ";" (split in '(";"))) x)
                            (input)))))))
(def experiences 
  (using 
   (file "./data/experiences.txt" as 'input)
   (join "Experiences"
         (listfile))))

(def footer (& "Generated in " (gh-link "Heresy") " with " (gh-link "resume.hsy")))

;; Rendering

; Renders the personal details section
(def dets
  (prep details))

; Render techs list
(def techs
  (let ([s (delimit ", " (tail technologies))])
    (& (heading (head technologies))
       "\n"
       (left$ s (- (len$ s) 2))
       "  \n")))

; Render projects
(def projs 
  (& (heading (head projects))
     (bullet-list 
      (colonify  
       (map (fn (x) (delimit "  "
                             (list (** (gh-link (x 1)) "**")
                                   (** (x 2))
                                   (x 3)))) 
            (tail projects))))))

; Render experiences
(def exps
  (& (heading (head experiences))
     (bullet-list (colonify (tail experiences)))))

;; Main Output
(def fn print-resume ()
  (using (file "resume.md" as 'rewrite)
         (print (prep (list dets self projs techs exps (** footer))))))

(print-resume)